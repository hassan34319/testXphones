"use client";
import { FormEvent, useEffect, useState } from "react";
import { renderRatingStars } from "../utils/stars";
import Image from "next/image";
import { sanityClient } from "../../lib/sanityClient";
import { User } from "@prisma/client";
import toast from "react-hot-toast";
interface Review {
  _key?: string;
  user: string;
  rating: number;
  reviewText: string;
  date: string;
  status: string;
  images: string[];
}

type Props = {
  id: string;
  currentUser: User | null;
  review?: Review[];
};

function ProductReview({ id, currentUser, review }: Props) {
  console.log("loaded review", review);
  const [uploadedImage, setUploadedImage] = useState([]);
  const [isCloudinaryReady, setIsCloudinaryReady] = useState(false);
  const [rating, setRating] = useState(0);
  const [reviewText, setReviewText] = useState("");
  console.log(uploadedImage);

  function formatDateToNormalDate(dateString: string) {
    const months = [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December",
    ];

    const date = new Date(dateString);
    const day = date.getDate();
    const month = months[date.getMonth()];
    const year = date.getFullYear();

    return `${day} ${month} ${year}`;
  }

  const handleImageUpload = () => {
    // Initialize Cloudinary Widget
    const widget = (window as any).cloudinary.createUploadWidget(
      {
        cloudName: "dxu48h2sd",
        uploadPreset: "ao0bo4fi",
      },
      (error: any, result: any) => {
        if (!error && result && result.event === "success") {
          setUploadedImage((prevUploadedImage) =>
            prevUploadedImage.concat(result.info.secure_url)
          );
          console.log(result.info.secure_url);
        }
      }
    );

    // Open the widget when the button is clicked
    widget.open();
  };

  const handleRatingChange = (value: number) => {
    setRating(value);
  };

  const handleReviewTextChange = (
    event: React.ChangeEvent<HTMLTextAreaElement>
  ) => {
    setReviewText(event.target.value);
  };

  const addReviewToProduct = async (productId: string, reviewData: Review) => {
    console.log(productId);
    try {
      // Fetch the existing product data
      const product = await sanityClient.getDocument(productId);
      if (!product) {
        throw new Error("Product not found");
      }
      console.log(product);
      // Update the product with the new review
      const updatedProduct = {
        ...product,
        review: product.review
          ? product.review.concat(reviewData)
          : [reviewData], // Assuming your product schema field is named "review"
      };

      // Send the updated product data to Sanity
      const response = await sanityClient.createOrReplace(updatedProduct);

      return response;
    } catch (error) {
      console.error("Error adding review to product:", error);
      throw error;
    }
  };
  const handleSubmit = async (event: FormEvent) => {
    event.preventDefault();
    if (!currentUser || currentUser == null) {
      return;
    }
    try {
      const reviewData: Review = {
        // This will be generated by Sanity upon creation
        _key: Date.now().toLocaleString(),
        user: currentUser!.firstName! + " " + currentUser.lastName!, // Replace with the actual user data or get it from the authentication context
        rating,
        reviewText,
        date: new Date().toISOString(),
        status: "pending",
        images: uploadedImage, // You can set the default status here, or adjust it based on your requirements
      };

      // Call the submit handler function to add the review to the product
      const response = await addReviewToProduct(id, reviewData);
      console.log("Review added successfully:", response);

      // Reset the form after successful submission
      toast.success("Added Review");
      setReviewText("");
      setRating(0);
      setUploadedImage([]);
    } catch (error) {
      console.error("Error adding review:", error);
    }
  };
  return (
    <>
      {review
        ? review.map((rev) => {
            return (
              <article key={rev._key} className="mt-10 w-10/12 hidden md:block">
                <div className="flex items-center mb-4 space-x-4">
                  <Image
                    className="rounded-full"
                    src="/prof.png"
                    alt="pic"
                    width={40}
                    height={40}
                  />
                  <div className="space-y-1 font-medium text-black dark:text-white">
                    <p className="text-black">
                      {rev.user}
                      <time
                        dateTime="2014-08-16 19:00"
                        className="block text-sm text-gray-500 dark:text-gray-400"
                      >
                        Reviewed on {formatDateToNormalDate(rev.date)}
                      </time>
                    </p>
                  </div>
                </div>
                <div className="flex items-center mb-1">
                  <div className="flex flex-row space-x-2">
                    {renderRatingStars(rev.rating).map((star, index) => (
                      <span key={index}>{star}</span>
                    ))}
                  </div>
                </div>
                <footer className="mb-5 text-sm text-gray-500 dark:text-gray-400"></footer>
                <p className="mb-2 text-gray-500 dark:text-gray-400">
                  {rev.reviewText}
                </p>
                {rev.images && rev.images.length >0 &&  (
                  <div className="flex flex-wrap w-full h-[20vh] space-x-4 mt-4 items-center">
                    {rev.images.map((img) => {
                      return (
                        <div
                          key={rev._key}
                          className="h-[15vh] w-[20%] relative"
                        >
                          <Image
                            className="object-contain"
                            src={img}
                            alt="Image 1"
                            fill
                          />
                        </div>
                      );
                    })}
                  </div>
                )}
                <aside>
                  <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
                    19 people found this helpful
                  </p>
                  <div className="flex items-center mt-3 space-x-3 divide-x divide-gray-200 dark:divide-gray-600">
                    <a
                      href="#"
                      className="text-gray-900 bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 font-medium rounded-lg text-xs px-2 py-1.5 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700"
                    >
                      Helpful
                    </a>
                    <a
                      href="#"
                      className="pl-4 text-sm font-medium text-blue-600 hover:underline dark:text-blue-500"
                    >
                      Report abuse
                    </a>
                  </div>
                </aside>
              </article>
            );
          })
        : ""}

      {/* Add review box */}
      {/* Add review box */}
      {currentUser && (
        <div className="bg-gray-100 p-4 rounded mt-8 w-full hidden md:block">
          <h3 className="text-xl font-medium mb-2">Write a Review</h3>
          <div className="flex flex-col justify-center items-center mb-4">
            <div className="mr-2">
              <span className="text-gray-700">Rating:</span>
              <div className="flex items-center mt-1">
                {[1, 2, 3, 4, 5].map((value) => (
                  <svg
                    key={value}
                    className={`w-4 h-4 cursor-pointer ${
                      value <= rating ? "text-yellow-400" : "text-gray-300"
                    }`}
                    onClick={() => handleRatingChange(value)}
                    aria-hidden="true"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="currentColor"
                    viewBox="0 0 22 20"
                  >
                    {/* Replace with your preferred SVG code for a yellow star */}
                    <path d="M20.924 7.625a1.523 1.523 0 0 0-1.238-1.044l-5.051-.734-2.259-4.577a1.534 1.534 0 0 0-2.752 0L7.365 5.847l-5.051.734A1.535 1.535 0 0 0 1.463 9.2l3.656 3.563-.863 5.031a1.532 1.532 0 0 0 2.226 1.616L11 17.033l4.518 2.375a1.534 1.534 0 0 0 2.226-1.617l-.863-5.03L20.537 9.2a1.523 1.523 0 0 0 .387-1.575Z" />
                  </svg>
                ))}
              </div>
            </div>
            <div className="w-full">
              <span className="text-gray-700">Review:</span>
              <textarea
                className="w-full h-20 p-2 mt-1 border border-gray-300 rounded focus:outline-none focus:border-blue-500"
                value={reviewText}
                onChange={handleReviewTextChange}
              ></textarea>
              {uploadedImage && uploadedImage.length > 0 && (
                <div className="mt-2 flex flex-row space-x-4 ">
                  {uploadedImage.map((imageUrl, index) => (
                    <Image
                      key={index}
                      src={imageUrl}
                      alt={`Uploaded ${index + 1}`}
                      width={100}
                      height={100}
                      className="mr-2" // Averdjust spacing between images if needed
                    />
                  ))}
                </div>
              )}
            </div>
          </div>
          <button
            className="bg-blue-500 px-4 py-2 mr-4 text-white rounded cursor-pointer"
            onClick={handleImageUpload}
          >
            Upload Image
          </button>
          <button
            className="bg-red-500 hover:bg-red-600 text-white font-medium py-2 px-4 rounded focus:outline-none focus:bg-red-600"
            onClick={handleSubmit}
          >
            Submit Reviews
          </button>
        </div>
      )}
    </>
  );
}

export default ProductReview;
